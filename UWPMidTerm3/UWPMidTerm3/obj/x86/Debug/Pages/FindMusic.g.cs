#pragma checksum "D:\software\Workspaces\Visual Studio 2017\win 10 uwp\homework\UWPMidTerm3\UWPMidTerm3\Pages\FindMusic.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "DC6BA60C7147ADCB6704CF77294DA3EF"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UWPMidTerm3.Pages
{
    partial class FindMusic : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Windows.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Canvas_Left(global::Windows.UI.Xaml.FrameworkElement obj, global::System.Double value)
            {
                global::Windows.UI.Xaml.Controls.Canvas.SetLeft(obj, value);
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Media_RectangleGeometry_Rect(global::Windows.UI.Xaml.Media.RectangleGeometry obj, global::Windows.Foundation.Rect value)
            {
                obj.Rect = value;
            }
            public static void Set_Windows_UI_Xaml_Shapes_Shape_Fill(global::Windows.UI.Xaml.Shapes.Shape obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Fill = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Image_Source(global::Windows.UI.Xaml.Controls.Image obj, global::Windows.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.ImageSource) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Grid_BorderBrush(global::Windows.UI.Xaml.Controls.Grid obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.BorderBrush = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(global::Windows.UI.Xaml.Controls.TextBlock obj, global::Windows.UI.Xaml.Media.Brush value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Windows.UI.Xaml.Media.Brush) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Windows.UI.Xaml.Media.Brush), targetNullValue);
                }
                obj.Foreground = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj10_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Song dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj10;
            private global::Windows.UI.Xaml.Controls.TextBlock obj11;
            private global::Windows.UI.Xaml.Controls.TextBlock obj12;

            public FindMusic_obj10_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 10: // Pages\FindMusic.xaml line 227
                        this.obj10 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 11: // Pages\FindMusic.xaml line 228
                        this.obj11 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 12: // Pages\FindMusic.xaml line 229
                        this.obj12 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj10.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Song) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Song)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Song obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_title(obj.title, phase);
                        this.Update_singers(obj.singers, phase);
                    }
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 228
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj11, obj, null);
                }
            }
            private void Update_singers(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 229
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj12, (global::System.String)this.LookupConverter("singersConvert").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj7_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Chart dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj7;
            private global::Windows.UI.Xaml.Controls.Image obj8;
            private global::Windows.UI.Xaml.Controls.ListView obj9;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj16;
            private global::Windows.UI.Xaml.Media.RectangleGeometry obj17;

            private FindMusic_obj7_BindingsTracking bindingsTracking;

            public FindMusic_obj7_Bindings()
            {
                this.bindingsTracking = new FindMusic_obj7_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 7: // Pages\FindMusic.xaml line 199
                        this.obj7 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Canvas)target);
                        break;
                    case 8: // Pages\FindMusic.xaml line 201
                        this.obj8 = (global::Windows.UI.Xaml.Controls.Image)target;
                        (this.obj8).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Canvas.LeftProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.picLeft = global::Windows.UI.Xaml.Controls.Canvas.GetLeft(this.obj8);
                            }
                        });
                        break;
                    case 9: // Pages\FindMusic.xaml line 223
                        this.obj9 = (global::Windows.UI.Xaml.Controls.ListView)target;
                        break;
                    case 15: // Pages\FindMusic.xaml line 215
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 16: // Pages\FindMusic.xaml line 216
                        this.obj16 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17: // Pages\FindMusic.xaml line 204
                        this.obj17 = (global::Windows.UI.Xaml.Media.RectangleGeometry)target;
                        (this.obj17).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Media.RectangleGeometry.RectProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                            if (this.initialized)
                            {
                                // Update Two Way binding
                                this.dataRoot.rect = this.obj17.Rect;
                            }
                        });
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj7.Target as global::Windows.UI.Xaml.Controls.Canvas).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Chart) item, 1 << phase);
            }

            public void Recycle()
            {
                this.bindingsTracking.ReleaseAllListeners();
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Chart)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Chart obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_picLeft(obj.picLeft, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_songs(obj.songs, phase);
                        this.Update_type(obj.type, phase);
                        this.Update_title(obj.title, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_rect(obj.rect, phase);
                    }
                }
            }
            private void Update_picLeft(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\FindMusic.xaml line 201
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Canvas_Left(this.obj8, obj);
                }
            }
            private void Update_songs(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Song> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 223
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj9, obj, null);
                }
            }
            private void Update_type(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 215
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 216
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                }
            }
            private void Update_rect(global::Windows.Foundation.Rect obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Pages\FindMusic.xaml line 204
                    XamlBindingSetters.Set_Windows_UI_Xaml_Media_RectangleGeometry_Rect(this.obj17, obj);
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class FindMusic_obj7_BindingsTracking
            {
                private global::System.WeakReference<FindMusic_obj7_Bindings> weakRefToBindingObj; 

                public FindMusic_obj7_BindingsTracking(FindMusic_obj7_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<FindMusic_obj7_Bindings>(obj);
                }

                public FindMusic_obj7_Bindings TryGetBindingObject()
                {
                    FindMusic_obj7_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_(null);
                }

                public void PropertyChanged_(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    FindMusic_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::UWPMidTerm3.Models.Chart obj = sender as global::UWPMidTerm3.Models.Chart;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_picLeft(obj.picLeft, DATA_CHANGED);
                                bindings.Update_rect(obj.rect, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "picLeft":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_picLeft(obj.picLeft, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "rect":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_rect(obj.rect, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void UpdateChildListeners_(global::UWPMidTerm3.Models.Chart obj)
                {
                    FindMusic_obj7_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        if (bindings.dataRoot != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)bindings.dataRoot).PropertyChanged -= PropertyChanged_;
                        }
                        if (obj != null)
                        {
                            bindings.dataRoot = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_;
                        }
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj21_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj21;

            public FindMusic_obj21_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 21: // Pages\FindMusic.xaml line 187
                        this.obj21 = new global::System.WeakReference((global::Windows.UI.Xaml.Shapes.Ellipse)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj21.Target as global::Windows.UI.Xaml.Shapes.Ellipse).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_brush(obj.brush, phase);
                    }
                }
            }
            private void Update_brush(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 187
                    if ((this.obj21.Target as global::Windows.UI.Xaml.Shapes.Ellipse) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill((this.obj21.Target as global::Windows.UI.Xaml.Shapes.Ellipse), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj23_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Album dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj23;
            private global::Windows.UI.Xaml.Controls.TextBlock obj25;
            private global::Windows.UI.Xaml.Controls.TextBlock obj26;
            private global::Windows.UI.Xaml.Controls.Image obj27;

            public FindMusic_obj23_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 23: // Pages\FindMusic.xaml line 159
                        this.obj23 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 25: // Pages\FindMusic.xaml line 172
                        this.obj25 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 26: // Pages\FindMusic.xaml line 174
                        this.obj26 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 27: // Pages\FindMusic.xaml line 164
                        this.obj27 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj23.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Album) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Album)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Album obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_title(obj.title, phase);
                        this.Update_singers(obj.singers, phase);
                        this.Update_cover(obj.cover, phase);
                    }
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 172
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj25, obj, null);
                }
            }
            private void Update_singers(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 174
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj26, (global::System.String)this.LookupConverter("singersConvert").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_cover(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 164
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj27, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj22_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj22;

            public FindMusic_obj22_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 22: // Pages\FindMusic.xaml line 155
                        this.obj22 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.GridView)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj22.Target as global::Windows.UI.Xaml.Controls.GridView).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_collection3(obj.collection3, phase);
                    }
                }
            }
            private void Update_collection3(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Album> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 155
                    if ((this.obj22.Target as global::Windows.UI.Xaml.Controls.GridView) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource((this.obj22.Target as global::Windows.UI.Xaml.Controls.GridView), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj30_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Tag dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj30;
            private global::Windows.UI.Xaml.Shapes.Rectangle obj31;
            private global::Windows.UI.Xaml.Controls.TextBlock obj32;

            public FindMusic_obj30_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 30: // Pages\FindMusic.xaml line 144
                        this.obj30 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 31: // Pages\FindMusic.xaml line 145
                        this.obj31 = (global::Windows.UI.Xaml.Shapes.Rectangle)target;
                        break;
                    case 32: // Pages\FindMusic.xaml line 146
                        this.obj32 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj30.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Tag) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Tag)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Tag obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_borderColor(obj.borderColor, phase);
                        this.Update_background(obj.background, phase);
                        this.Update_name(obj.name, phase);
                        this.Update_foreground(obj.foreground, phase);
                    }
                }
            }
            private void Update_borderColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 144
                    if ((this.obj30.Target as global::Windows.UI.Xaml.Controls.Grid) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Grid_BorderBrush((this.obj30.Target as global::Windows.UI.Xaml.Controls.Grid), obj, null);
                    }
                }
            }
            private void Update_background(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 145
                    XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill(this.obj31, obj, null);
                }
            }
            private void Update_name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 146
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj32, obj, null);
                }
            }
            private void Update_foreground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 146
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj32, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj36_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj36;

            public FindMusic_obj36_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 36: // Pages\FindMusic.xaml line 132
                        this.obj36 = new global::System.WeakReference((global::Windows.UI.Xaml.Shapes.Ellipse)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj36.Target as global::Windows.UI.Xaml.Shapes.Ellipse).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_brush(obj.brush, phase);
                    }
                }
            }
            private void Update_brush(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 132
                    if ((this.obj36.Target as global::Windows.UI.Xaml.Shapes.Ellipse) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill((this.obj36.Target as global::Windows.UI.Xaml.Shapes.Ellipse), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj38_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Song dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj38;
            private global::Windows.UI.Xaml.Controls.TextBlock obj40;
            private global::Windows.UI.Xaml.Controls.TextBlock obj41;
            private global::Windows.UI.Xaml.Controls.TextBlock obj42;
            private global::Windows.UI.Xaml.Controls.Image obj43;

            public FindMusic_obj38_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 38: // Pages\FindMusic.xaml line 99
                        this.obj38 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.StackPanel)target);
                        break;
                    case 40: // Pages\FindMusic.xaml line 118
                        this.obj40 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 41: // Pages\FindMusic.xaml line 115
                        this.obj41 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 42: // Pages\FindMusic.xaml line 116
                        this.obj42 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 43: // Pages\FindMusic.xaml line 104
                        this.obj43 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj38.Target as global::Windows.UI.Xaml.Controls.StackPanel).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Song) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Song)newDataRoot;
                    return true;
                }
                return false;
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Song obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_interval(obj.interval, phase);
                        this.Update_title(obj.title, phase);
                        this.Update_singers(obj.singers, phase);
                        this.Update_cover(obj.cover, phase);
                    }
                }
            }
            private void Update_interval(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 118
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj40, obj, null);
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 115
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj41, obj, null);
                }
            }
            private void Update_singers(global::System.Collections.Generic.List<global::System.String> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 116
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj42, (global::System.String)this.LookupConverter("singersConvert").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_cover(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 104
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj43, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj37_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj37;

            public FindMusic_obj37_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 37: // Pages\FindMusic.xaml line 95
                        this.obj37 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.GridView)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj37.Target as global::Windows.UI.Xaml.Controls.GridView).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_collection2(obj.collection2, phase);
                    }
                }
            }
            private void Update_collection2(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Song> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 95
                    if ((this.obj37.Target as global::Windows.UI.Xaml.Controls.GridView) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource((this.obj37.Target as global::Windows.UI.Xaml.Controls.GridView), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj46_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Tag dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj46;
            private global::Windows.UI.Xaml.Shapes.Rectangle obj47;
            private global::Windows.UI.Xaml.Controls.TextBlock obj48;

            public FindMusic_obj46_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 46: // Pages\FindMusic.xaml line 84
                        this.obj46 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 47: // Pages\FindMusic.xaml line 85
                        this.obj47 = (global::Windows.UI.Xaml.Shapes.Rectangle)target;
                        break;
                    case 48: // Pages\FindMusic.xaml line 86
                        this.obj48 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj46.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Tag) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Tag)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Tag obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_borderColor(obj.borderColor, phase);
                        this.Update_background(obj.background, phase);
                        this.Update_name(obj.name, phase);
                        this.Update_foreground(obj.foreground, phase);
                    }
                }
            }
            private void Update_borderColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 84
                    if ((this.obj46.Target as global::Windows.UI.Xaml.Controls.Grid) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Grid_BorderBrush((this.obj46.Target as global::Windows.UI.Xaml.Controls.Grid), obj, null);
                    }
                }
            }
            private void Update_background(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 85
                    XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill(this.obj47, obj, null);
                }
            }
            private void Update_name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 86
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj48, obj, null);
                }
            }
            private void Update_foreground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 86
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj48, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj52_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj52;

            public FindMusic_obj52_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 52: // Pages\FindMusic.xaml line 72
                        this.obj52 = new global::System.WeakReference((global::Windows.UI.Xaml.Shapes.Ellipse)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj52.Target as global::Windows.UI.Xaml.Shapes.Ellipse).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_brush(obj.brush, phase);
                    }
                }
            }
            private void Update_brush(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 72
                    if ((this.obj52.Target as global::Windows.UI.Xaml.Shapes.Ellipse) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill((this.obj52.Target as global::Windows.UI.Xaml.Shapes.Ellipse), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj54_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.SongSheet dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj54;
            private global::Windows.UI.Xaml.Controls.Image obj57;
            private global::Windows.UI.Xaml.Controls.TextBlock obj58;
            private global::Windows.UI.Xaml.Controls.TextBlock obj59;

            public FindMusic_obj54_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 54: // Pages\FindMusic.xaml line 45
                        this.obj54 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Canvas)target);
                        break;
                    case 57: // Pages\FindMusic.xaml line 48
                        this.obj57 = (global::Windows.UI.Xaml.Controls.Image)target;
                        break;
                    case 58: // Pages\FindMusic.xaml line 49
                        this.obj58 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 59: // Pages\FindMusic.xaml line 52
                        this.obj59 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj54.Target as global::Windows.UI.Xaml.Controls.Canvas).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.SongSheet) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.SongSheet)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.SongSheet obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_cover(obj.cover, phase);
                        this.Update_title(obj.title, phase);
                        this.Update_visitnum(obj.visitnum, phase);
                    }
                }
            }
            private void Update_cover(global::Windows.UI.Xaml.Media.Imaging.BitmapImage obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 48
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Image_Source(this.obj57, obj, null);
                }
            }
            private void Update_title(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 49
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj58, obj, null);
                }
            }
            private void Update_visitnum(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 52
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj59, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj53_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.ModelCollection dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj53;

            public FindMusic_obj53_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 53: // Pages\FindMusic.xaml line 41
                        this.obj53 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.GridView)target);
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj53.Target as global::Windows.UI.Xaml.Controls.GridView).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.ModelCollection) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.ModelCollection)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.ModelCollection obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_collection(obj.collection, phase);
                    }
                }
            }
            private void Update_collection(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.SongSheet> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 41
                    if ((this.obj53.Target as global::Windows.UI.Xaml.Controls.GridView) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource((this.obj53.Target as global::Windows.UI.Xaml.Controls.GridView), obj, null);
                    }
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj60_Bindings :
            global::Windows.UI.Xaml.IDataTemplateExtension,
            global::Windows.UI.Xaml.Markup.IDataTemplateComponent,
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Models.Tag dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private bool removedDataContextHandler = false;

            // Fields for each control that has bindings.
            private global::System.WeakReference obj60;
            private global::Windows.UI.Xaml.Shapes.Rectangle obj61;
            private global::Windows.UI.Xaml.Controls.TextBlock obj62;

            public FindMusic_obj60_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 60: // Pages\FindMusic.xaml line 30
                        this.obj60 = new global::System.WeakReference((global::Windows.UI.Xaml.Controls.Grid)target);
                        break;
                    case 61: // Pages\FindMusic.xaml line 31
                        this.obj61 = (global::Windows.UI.Xaml.Shapes.Rectangle)target;
                        break;
                    case 62: // Pages\FindMusic.xaml line 32
                        this.obj62 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    default:
                        break;
                }
            }

            public void DataContextChangedHandler(global::Windows.UI.Xaml.FrameworkElement sender, global::Windows.UI.Xaml.DataContextChangedEventArgs args)
            {
                 if (this.SetDataRoot(args.NewValue))
                 {
                    this.Update();
                 }
            }

            // IDataTemplateExtension

            public bool ProcessBinding(uint phase)
            {
                throw new global::System.NotImplementedException();
            }

            public int ProcessBindings(global::Windows.UI.Xaml.Controls.ContainerContentChangingEventArgs args)
            {
                int nextPhase = -1;
                ProcessBindings(args.Item, args.ItemIndex, (int)args.Phase, out nextPhase);
                return nextPhase;
            }

            public void ResetTemplate()
            {
                Recycle();
            }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
                switch(phase)
                {
                    case 0:
                        nextPhase = -1;
                        this.SetDataRoot(item);
                        if (!removedDataContextHandler)
                        {
                            removedDataContextHandler = true;
                            (this.obj60.Target as global::Windows.UI.Xaml.Controls.Grid).DataContextChanged -= this.DataContextChangedHandler;
                        }
                        this.initialized = true;
                        break;
                }
                this.Update_((global::UWPMidTerm3.Models.Tag) item, 1 << phase);
            }

            public void Recycle()
            {
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Models.Tag)newDataRoot;
                    return true;
                }
                return false;
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Models.Tag obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_borderColor(obj.borderColor, phase);
                        this.Update_background(obj.background, phase);
                        this.Update_name(obj.name, phase);
                        this.Update_foreground(obj.foreground, phase);
                    }
                }
            }
            private void Update_borderColor(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 30
                    if ((this.obj60.Target as global::Windows.UI.Xaml.Controls.Grid) != null)
                    {
                        XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Grid_BorderBrush((this.obj60.Target as global::Windows.UI.Xaml.Controls.Grid), obj, null);
                    }
                }
            }
            private void Update_background(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 31
                    XamlBindingSetters.Set_Windows_UI_Xaml_Shapes_Shape_Fill(this.obj61, obj, null);
                }
            }
            private void Update_name(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 32
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj62, obj, null);
                }
            }
            private void Update_foreground(global::Windows.UI.Xaml.Media.SolidColorBrush obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 32
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Foreground(this.obj62, obj, null);
                }
            }
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class FindMusic_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IFindMusic_Bindings
        {
            private global::UWPMidTerm3.Pages.FindMusic dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.GridView obj6;
            private global::Windows.UI.Xaml.Controls.GridView obj18;
            private global::Windows.UI.Xaml.Controls.FlipView obj19;
            private global::Windows.UI.Xaml.Controls.GridView obj20;
            private global::Windows.UI.Xaml.Controls.GridView obj33;
            private global::Windows.UI.Xaml.Controls.FlipView obj34;
            private global::Windows.UI.Xaml.Controls.GridView obj35;
            private global::Windows.UI.Xaml.Controls.GridView obj49;
            private global::Windows.UI.Xaml.Controls.FlipView obj50;
            private global::Windows.UI.Xaml.Controls.GridView obj51;

            public FindMusic_obj1_Bindings()
            {
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 6: // Pages\FindMusic.xaml line 195
                        this.obj6 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 18: // Pages\FindMusic.xaml line 140
                        this.obj18 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 19: // Pages\FindMusic.xaml line 151
                        this.obj19 = (global::Windows.UI.Xaml.Controls.FlipView)target;
                        break;
                    case 20: // Pages\FindMusic.xaml line 183
                        this.obj20 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 33: // Pages\FindMusic.xaml line 80
                        this.obj33 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 34: // Pages\FindMusic.xaml line 91
                        this.obj34 = (global::Windows.UI.Xaml.Controls.FlipView)target;
                        break;
                    case 35: // Pages\FindMusic.xaml line 128
                        this.obj35 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 49: // Pages\FindMusic.xaml line 26
                        this.obj49 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    case 50: // Pages\FindMusic.xaml line 37
                        this.obj50 = (global::Windows.UI.Xaml.Controls.FlipView)target;
                        break;
                    case 51: // Pages\FindMusic.xaml line 68
                        this.obj51 = (global::Windows.UI.Xaml.Controls.GridView)target;
                        break;
                    default:
                        break;
                }
            }

            // IFindMusic_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = (global::UWPMidTerm3.Pages.FindMusic)newDataRoot;
                    return true;
                }
                return false;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::UWPMidTerm3.Pages.FindMusic obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_charts(obj.charts, phase);
                        this.Update_tags3(obj.tags3, phase);
                        this.Update_newAlbums(obj.newAlbums, phase);
                        this.Update_brushes3(obj.brushes3, phase);
                        this.Update_tags2(obj.tags2, phase);
                        this.Update_newSongs(obj.newSongs, phase);
                        this.Update_brushes2(obj.brushes2, phase);
                        this.Update_tags(obj.tags, phase);
                        this.Update_songSheets(obj.songSheets, phase);
                        this.Update_brushes(obj.brushes, phase);
                    }
                }
            }
            private void Update_charts(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Chart> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 195
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj6, obj, null);
                }
            }
            private void Update_tags3(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Tag> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 140
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj18, obj, null);
                }
            }
            private void Update_newAlbums(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 151
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj19, obj, null);
                }
            }
            private void Update_brushes3(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 183
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj20, obj, null);
                }
            }
            private void Update_tags2(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Tag> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 80
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj33, obj, null);
                }
            }
            private void Update_newSongs(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 91
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj34, obj, null);
                }
            }
            private void Update_brushes2(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 128
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj35, obj, null);
                }
            }
            private void Update_tags(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.Tag> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 26
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj49, obj, null);
                }
            }
            private void Update_songSheets(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 37
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj50, obj, null);
                }
            }
            private void Update_brushes(global::System.Collections.ObjectModel.ObservableCollection<global::UWPMidTerm3.Models.ModelCollection> obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Pages\FindMusic.xaml line 68
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj51, obj, null);
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // Pages\FindMusic.xaml line 19
                {
                    this.border1 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 3: // Pages\FindMusic.xaml line 20
                {
                    this.border2 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 4: // Pages\FindMusic.xaml line 21
                {
                    this.border3 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 5: // Pages\FindMusic.xaml line 22
                {
                    this.border4 = (global::Windows.UI.Xaml.Controls.Border)(target);
                }
                break;
            case 6: // Pages\FindMusic.xaml line 195
                {
                    this.TopListGridView = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.TopListGridView).ItemClick += this.TopListGridView_ItemClick;
                }
                break;
            case 7: // Pages\FindMusic.xaml line 199
                {
                    global::Windows.UI.Xaml.Controls.Canvas element7 = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                    ((global::Windows.UI.Xaml.Controls.Canvas)element7).PointerEntered += this.TopListCanvas_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.Canvas)element7).PointerExited += this.TopListCanvas_PointerExited;
                }
                break;
            case 13: // Pages\FindMusic.xaml line 219
                {
                    global::Windows.UI.Xaml.Shapes.Rectangle element13 = (global::Windows.UI.Xaml.Shapes.Rectangle)(target);
                    ((global::Windows.UI.Xaml.Shapes.Rectangle)element13).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 14: // Pages\FindMusic.xaml line 220
                {
                    global::Windows.UI.Xaml.Controls.TextBlock element14 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)element14).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 18: // Pages\FindMusic.xaml line 140
                {
                    this.NewAlbumTags = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.NewAlbumTags).ItemClick += this.NewAlbumTags_ItemClick;
                }
                break;
            case 19: // Pages\FindMusic.xaml line 151
                {
                    this.NewAlbumsPanel = (global::Windows.UI.Xaml.Controls.FlipView)(target);
                    ((global::Windows.UI.Xaml.Controls.FlipView)this.NewAlbumsPanel).SelectionChanged += this.NewAlbumsPanel_SelectionChanged;
                }
                break;
            case 20: // Pages\FindMusic.xaml line 183
                {
                    this.NewAlbumsIndicator = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.NewAlbumsIndicator).ItemClick += this.NewAlbumsIndicator_ItemClick;
                }
                break;
            case 22: // Pages\FindMusic.xaml line 155
                {
                    global::Windows.UI.Xaml.Controls.GridView element22 = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)element22).ItemClick += this.NewAlbumGridView_ItemClick;
                }
                break;
            case 24: // Pages\FindMusic.xaml line 161
                {
                    global::Windows.UI.Xaml.Controls.Canvas element24 = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                    ((global::Windows.UI.Xaml.Controls.Canvas)element24).PointerEntered += this.AlbumImageCanvas_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.Canvas)element24).PointerExited += this.AlbumImageCanvas_PointerExited;
                }
                break;
            case 28: // Pages\FindMusic.xaml line 167
                {
                    global::Windows.UI.Xaml.Shapes.Ellipse element28 = (global::Windows.UI.Xaml.Shapes.Ellipse)(target);
                    ((global::Windows.UI.Xaml.Shapes.Ellipse)element28).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 29: // Pages\FindMusic.xaml line 168
                {
                    global::Windows.UI.Xaml.Controls.TextBlock element29 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)element29).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 33: // Pages\FindMusic.xaml line 80
                {
                    this.NewMusicTags = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.NewMusicTags).ItemClick += this.NewMusicTags_ItemClick;
                }
                break;
            case 34: // Pages\FindMusic.xaml line 91
                {
                    this.NewSongsPanel = (global::Windows.UI.Xaml.Controls.FlipView)(target);
                    ((global::Windows.UI.Xaml.Controls.FlipView)this.NewSongsPanel).SelectionChanged += this.NewSongsPanel_SelectionChanged;
                }
                break;
            case 35: // Pages\FindMusic.xaml line 128
                {
                    this.NewSongsIndicator = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.NewSongsIndicator).ItemClick += this.NewSongsIndicator_ItemClick;
                }
                break;
            case 37: // Pages\FindMusic.xaml line 95
                {
                    global::Windows.UI.Xaml.Controls.GridView element37 = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)element37).ItemClick += this.NewSongGridView_ItemClick;
                }
                break;
            case 39: // Pages\FindMusic.xaml line 101
                {
                    global::Windows.UI.Xaml.Controls.Canvas element39 = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                    ((global::Windows.UI.Xaml.Controls.Canvas)element39).PointerEntered += this.SongImageCanvas_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.Canvas)element39).PointerExited += this.SongImageCanvas_PointerExited;
                }
                break;
            case 44: // Pages\FindMusic.xaml line 108
                {
                    global::Windows.UI.Xaml.Shapes.Ellipse element44 = (global::Windows.UI.Xaml.Shapes.Ellipse)(target);
                    ((global::Windows.UI.Xaml.Shapes.Ellipse)element44).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 45: // Pages\FindMusic.xaml line 109
                {
                    global::Windows.UI.Xaml.Controls.TextBlock element45 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)element45).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 49: // Pages\FindMusic.xaml line 26
                {
                    this.SongSheetTags = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.SongSheetTags).ItemClick += this.SongSheetTags_ItemClick;
                }
                break;
            case 50: // Pages\FindMusic.xaml line 37
                {
                    this.SongSheetsPanel = (global::Windows.UI.Xaml.Controls.FlipView)(target);
                    ((global::Windows.UI.Xaml.Controls.FlipView)this.SongSheetsPanel).SelectionChanged += this.SongSheetsPanel_SelectionChanged;
                }
                break;
            case 51: // Pages\FindMusic.xaml line 68
                {
                    this.SongSheetsIndicator = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)this.SongSheetsIndicator).ItemClick += this.SongSheetsIndicator_ItemClick;
                }
                break;
            case 53: // Pages\FindMusic.xaml line 41
                {
                    global::Windows.UI.Xaml.Controls.GridView element53 = (global::Windows.UI.Xaml.Controls.GridView)(target);
                    ((global::Windows.UI.Xaml.Controls.GridView)element53).ItemClick += this.SongSheetGridView_ItemClick;
                }
                break;
            case 54: // Pages\FindMusic.xaml line 45
                {
                    global::Windows.UI.Xaml.Controls.Canvas element54 = (global::Windows.UI.Xaml.Controls.Canvas)(target);
                    ((global::Windows.UI.Xaml.Controls.Canvas)element54).PointerEntered += this.SongSheetCanvas_PointerEntered;
                    ((global::Windows.UI.Xaml.Controls.Canvas)element54).PointerExited += this.SongSheetCanvas_PointerExited;
                }
                break;
            case 55: // Pages\FindMusic.xaml line 57
                {
                    global::Windows.UI.Xaml.Shapes.Ellipse element55 = (global::Windows.UI.Xaml.Shapes.Ellipse)(target);
                    ((global::Windows.UI.Xaml.Shapes.Ellipse)element55).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            case 56: // Pages\FindMusic.xaml line 58
                {
                    global::Windows.UI.Xaml.Controls.TextBlock element56 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                    ((global::Windows.UI.Xaml.Controls.TextBlock)element56).PointerPressed += this.PlayAll_PointerPressed;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 10.0.16.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Pages\FindMusic.xaml line 1
                {                    
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    FindMusic_obj1_Bindings bindings = new FindMusic_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            case 7: // Pages\FindMusic.xaml line 199
                {                    
                    global::Windows.UI.Xaml.Controls.Canvas element7 = (global::Windows.UI.Xaml.Controls.Canvas)target;
                    FindMusic_obj7_Bindings bindings = new FindMusic_obj7_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element7.DataContext);
                    element7.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element7, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element7, bindings);
                }
                break;
            case 10: // Pages\FindMusic.xaml line 227
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element10 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    FindMusic_obj10_Bindings bindings = new FindMusic_obj10_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element10.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element10.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element10, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element10, bindings);
                }
                break;
            case 21: // Pages\FindMusic.xaml line 187
                {                    
                    global::Windows.UI.Xaml.Shapes.Ellipse element21 = (global::Windows.UI.Xaml.Shapes.Ellipse)target;
                    FindMusic_obj21_Bindings bindings = new FindMusic_obj21_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element21.DataContext);
                    element21.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element21, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element21, bindings);
                }
                break;
            case 22: // Pages\FindMusic.xaml line 155
                {                    
                    global::Windows.UI.Xaml.Controls.GridView element22 = (global::Windows.UI.Xaml.Controls.GridView)target;
                    FindMusic_obj22_Bindings bindings = new FindMusic_obj22_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element22.DataContext);
                    element22.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element22, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element22, bindings);
                }
                break;
            case 23: // Pages\FindMusic.xaml line 159
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element23 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    FindMusic_obj23_Bindings bindings = new FindMusic_obj23_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element23.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element23.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element23, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element23, bindings);
                }
                break;
            case 30: // Pages\FindMusic.xaml line 144
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element30 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    FindMusic_obj30_Bindings bindings = new FindMusic_obj30_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element30.DataContext);
                    element30.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element30, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element30, bindings);
                }
                break;
            case 36: // Pages\FindMusic.xaml line 132
                {                    
                    global::Windows.UI.Xaml.Shapes.Ellipse element36 = (global::Windows.UI.Xaml.Shapes.Ellipse)target;
                    FindMusic_obj36_Bindings bindings = new FindMusic_obj36_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element36.DataContext);
                    element36.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element36, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element36, bindings);
                }
                break;
            case 37: // Pages\FindMusic.xaml line 95
                {                    
                    global::Windows.UI.Xaml.Controls.GridView element37 = (global::Windows.UI.Xaml.Controls.GridView)target;
                    FindMusic_obj37_Bindings bindings = new FindMusic_obj37_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element37.DataContext);
                    element37.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element37, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element37, bindings);
                }
                break;
            case 38: // Pages\FindMusic.xaml line 99
                {                    
                    global::Windows.UI.Xaml.Controls.StackPanel element38 = (global::Windows.UI.Xaml.Controls.StackPanel)target;
                    FindMusic_obj38_Bindings bindings = new FindMusic_obj38_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element38.DataContext);
                    bindings.SetConverterLookupRoot(this);
                    element38.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element38, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element38, bindings);
                }
                break;
            case 46: // Pages\FindMusic.xaml line 84
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element46 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    FindMusic_obj46_Bindings bindings = new FindMusic_obj46_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element46.DataContext);
                    element46.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element46, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element46, bindings);
                }
                break;
            case 52: // Pages\FindMusic.xaml line 72
                {                    
                    global::Windows.UI.Xaml.Shapes.Ellipse element52 = (global::Windows.UI.Xaml.Shapes.Ellipse)target;
                    FindMusic_obj52_Bindings bindings = new FindMusic_obj52_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element52.DataContext);
                    element52.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element52, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element52, bindings);
                }
                break;
            case 53: // Pages\FindMusic.xaml line 41
                {                    
                    global::Windows.UI.Xaml.Controls.GridView element53 = (global::Windows.UI.Xaml.Controls.GridView)target;
                    FindMusic_obj53_Bindings bindings = new FindMusic_obj53_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element53.DataContext);
                    element53.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element53, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element53, bindings);
                }
                break;
            case 54: // Pages\FindMusic.xaml line 45
                {                    
                    global::Windows.UI.Xaml.Controls.Canvas element54 = (global::Windows.UI.Xaml.Controls.Canvas)target;
                    FindMusic_obj54_Bindings bindings = new FindMusic_obj54_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element54.DataContext);
                    element54.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element54, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element54, bindings);
                }
                break;
            case 60: // Pages\FindMusic.xaml line 30
                {                    
                    global::Windows.UI.Xaml.Controls.Grid element60 = (global::Windows.UI.Xaml.Controls.Grid)target;
                    FindMusic_obj60_Bindings bindings = new FindMusic_obj60_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(element60.DataContext);
                    element60.DataContextChanged += bindings.DataContextChangedHandler;
                    global::Windows.UI.Xaml.DataTemplate.SetExtensionInstance(element60, bindings);
                    global::Windows.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element60, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

